# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            output: lspvi-darwin
          - os: ubuntu-latest
            output: lspvi-linux
          - os: windows-latest
            output: lspvi.exe

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
          submodules: true  # This tells checkout action to clone submodules
          token: ${{ secrets.GH_PAT }}  # Personal Access Token with repo scope

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.3'

    - name: pull
      run: git submodule update --init --recursive

    - name: Build
      run: go build -o ${{ matrix.output }}



      # Create package with additional files
    # - name: Package Release
    #   shell: bash
    #   run: |
    #     mkdir release
    #     cp ${{ matrix.output }} release/
    #     # cp README.md release/ || true
    #     # cp LICENSE release/ || true
    #     # cp -r configs/* release/ || true
        
    #     if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
    #       7z a ${{ matrix.archive }} ./release/*
    #     else
    #       tar -czf ${{ matrix.archive }} -C release
    #     fi

      # Create Release and upload
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

      # Upload the archive
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ matrix.output }}
        asset_name: ${{ matrix.output }}
        asset_content_type: application/octet-stream


    # - name: Upload Linux Artifact
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.RTOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./${{ matrix.output }}
    #     asset_name: ${{ matrix.output }}
    #     # asset_path: ./lspvi-amd64-linux
    #     # asset_name: lspvi-amd64-linux
    #     asset_content_type: application/octet-stream
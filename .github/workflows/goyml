name: Build

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    if:  startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            output: lspvi-darwin
            archive: lspvi-darwin
          - os: ubuntu-latest
            output: lspvi-linux
            archive: lspvi-linux
          - os: windows-latest
            output: lspvi.exe
            archive: lspvi.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_PAT }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        run: go build -o ${{ matrix.output }}

      # Create package with additional files
      # - name: Package Release
      #   shell: bash
      #   run: |
      #     mkdir release
      #     cp ${{ matrix.output }} release/
      #     cp README.md release/ || true
      #     # cp LICENSE release/ || true
      #     # cp -r configs/* release/ || true
          
      #     if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
      #       7z a ${{ matrix.archive }} ./release/*
      #     else
      #       tar -czf ${{ matrix.archive }} -C release .
      #     fi

      - name: Check if release exists
        id: check_release
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            if gh release view ${{ github.ref_name }} 2>&1; then
              echo "release_exists=true" >> $env:GITHUB_OUTPUT
            else
              echo "release_exists=false" >> $env:GITHUB_OUTPUT
            fi
          else
            if gh release view ${{ github.ref_name }} &> /dev/null; then
              echo "release_exists=true" >> $GITHUB_OUTPUT
            else
              echo "release_exists=false" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RTOKEN}}

        
      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.release_exists == 'false' && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RTOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Get Release Upload URL
        id: get_upload_url
        shell: bash
        run: |
          # echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          # echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
          # if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
          # else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          # fi
        env:
          GITHUB_TOKEN: ${{ secrets.RTOKEN }}

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RTOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.archive }}
          asset_name: ${{ matrix.archive }}
          asset_content_type: application/octet-stream